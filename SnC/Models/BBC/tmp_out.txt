chapter 6 a case study the eight queens puzzle this chapter presents the rst of several case studies or paradigms in the orig inal sense of the word of programs written in an objectoriented style1 the eightqueens puzzle in the game of chess the queen can attack any piece that lies on the same row on the same column or along a diagonalhow would an objectoriented solution to the eightqueens puzzle di er from a solution written in a conventional imperative programming language in a conventional solution some sort of data structure would be used to maintain the positions of the pieceson the other hand we will empower the pieces to solve the problem themselvesthus the essence of our objectoriented solution will be to create objects that represent each of the queens and to provide them with the abilities to discover the solutionwith the computingassimulation view of chapter 1 we are creating a model universe de ning behavior for the objects in this universe then setting the universe in motionwhen the activity of the universe stabilizes the solution has been found1 creating objects that find their own solution how might we de ne the behavior of a queen object so that a group of queens working together can nd a solution on their own the rst observation is that in any solution no two queens can occupy the same column and consequently no column can be emptyat the start we can therefore assign a speci c column to each queen and reduce the problem to the simpler task of nding an appropriate rowthus the data values maintained for each queen will consist of three values a column value which is immutable a row value which is altered in pursuit of a solution and the neighboring queen to the immediate leftwe will nd a solution to the entire puzzle by asking the right most queen to nd an acceptable solutiona crccard description of the class queen including the data managed by each instance recall that this information is described on the back side of the card is shown in figure 6for the system to test a potential solution it is sucient for a queen to take a coordinate rowcolumn pair and produce a boolean value that indicates whether that queen or any queen to her left can attack the given locationthe procedure canattack uses the fact that for a diagonal motion the di erences in rows must be equal to the di erences in columnsthe method initialize establishes the initial conditions necessary for a queen object which in this case simply means setting the data valuesthe queen in the current column simply places herself in row 1advance then return false  found a solution  return true end as we noted in chapter 5 the pseudovariable self denotes the receiver for the current messagein this case we want the queen who is being asked to nd a solution to pass the message advance to herselfif we are not at the end the queen simply advances the row value by 13 the eightqueens puzzle in several languages in this section we present solutions to the eightqueens puzzle in several of the programming languages we are consideringin particular examine the solutions written in smalltalk and objectivec which use a special class for a sentinel value and contrast this with the solutions given in object pascal c or java all of which use a null pointer for the leftmost queen and thus must constantly test the value of pointer variables1 the eightqueens puzzle in object pascal the class de nition for the eightqueens puzzle in apple object pascal is shown belowthe borland language allows the class declaration to be broken into public and private sections and it includes a constructor function which we will use in place of the initialize routinea case study the eight queens puzzle end the pseudocode presented in the earlier sections is reasonably close to the pascal solution with two major di erencesthe rst is the lack of a return state ment in pascal and the second is the necessity to rst test whether a queen has a neighbor before passing a message to that neighborthus the code for the delphi language could in a single expression combine the test for neighbor being nonnull and the passing of a message to the neighborthe eightqueens puzzle in several languages 133 end end end the main program allocates space for each of the eight queens and initializes the queens with their column number and neighbor value2 the eightqueens puzzle in c the most important di erence between the pseudocode description of the al gorithm presented earlier and the eightqueens puzzle as actually coded in c is the explicit use of pointer valuessince initialization is performed by the constructor the main program can simply create the eight queen objects and then print their solutionwhen the loop completes the leftmost queen holds a null value for its neighbor eld while ev ery other queen points to its neighbor and the value lastqueen points to the rightmost queenthe constructor method must use the initialization clauses on the heading to initialize the constant value column as it is not permitted to use an assignment operator to initialize instance elds that have been declared constqueenqueenint col queen  ngh  columncol neighborngh f row  1 g because the value of the neighbor variable can be either a queen or a null value a test must be performed before any messages are sent to the neighborthe use of shortcircuit evaluation in the logical connectives and the ability to return from within a procedure simplify the code in comparison to the object pascal version which is otherwise very similar3 the eightqueens puzzle in java the solution in java is in many respects similar to the c solutionhowever in java the bodies of the methods are written directly in place and public or private designations are placed on the class de nitions themselvesthe following is the class description for the class queen with some of the methods omittedg g unlike in c in java the link to the next queen is simply declared as an object of type queen and not as a pointer to a queenbefore a message is sent to the neighbor instance variable an explicit test is performed to see if the value is nullthe method paint will draw an image of the queen then print the neighbor imagespaintg g g the graphics routines draw a small crown which looks like this j j j j m 138 chapter 6as we will describe in more detail in chapter 22 a program is created by the de ning of a subclass of the system class jframe and then the overriding of certain methodsnotably the constructor is used to provide initialization for the application while the method paint is used to redraw the screenthis declaration indicates that the value being held by the variable is an object type although not necessarily a queenin the c solution this was indicated by the null or empty value in the neighbor pointer variable in the leftmost queenthe second use of the neighbor links was in a recursive call to print the solutionthe eightqueens puzzle in several languages 141 the use of the sentinel allows the methods in class queen to simply pass messages to their neighbor without rst determining whether or not she is the leftmost queen5 the eightqueens puzzle in smalltalk the solution to the eightqueens puzzle in smalltalk is in most respects very similar to the solution given in objectiveca case study the eight queens puzzle the fact that the leftmost queen does not have a neighbor by de ning a special sentinel classthe sole purpose of this class is to provide a target for the messages sent by the leftmost queenthe sentinel value is the sole instance of the class sentinelqueen a subclass of class object which implements the following three methods advance  sentinels do not attack   false canattack row column column  sentinels cannot attack   false result  return empty list as result   list new one di erence between the objectivec and smalltalk versions is that the smalltalk code returns the result as a list of values rather than printing it on the outputthe eightqueens puzzle in several languages 143 rather than testing for the negation of a condition smalltalk provides an explicit iffalse statement which is used in the method advance advance  rst try next row  row  8 iftrue  row  row  1 self findsolution the while loop in smalltalk must use a block as the condition test as in the following ndsolution  neighbor canattack row column column  whiletrue  self advance iffalse   false  recall that an empty list is created by the sentinel value in response to the message resultthere are only functions in ruby every method returns a value which is simply the value of the last statement in the body of the methodcanattackrow column end the remainder of the ruby solution can be found in the appendixchapter summary in this rst case study we have examined a classic puzzle how to place eight queens on a chessboard in such a way that no queen can attack any of the otherswhile the problem is moderately intriguing our interest is not so much in the problem itself but in the way the solution to the problem has been structuredfurther reading a solution to the eightqueens puzzle constructed without the use of a sentinel value was described in my earlier book on smalltalk budd 1987what is the generate and test approach to nding a solution in a space of various alternative possibilities 4what is a sentinel the term is introduced in the solution presented in objectiveccan you explain why the sentinel class in the objectivec and smalltalk versions of the eightqueens puzzle do not need to provide an implemen tation for the method ndsolution despite the fact that this message is passed to the neighbor value in the method advance 3suppose we generalize the eightqueens problem to the nqueens problem where the task is to place n queens on an n by n chessboardusing whatever graphics facilities your system has alter one of the pro grams to display dynamically on a chessboard the positions of each queen as the program advances 